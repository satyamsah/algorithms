package abc;

import java.util.LinkedList;


public class EnqueDequeUsingLL {

	static class Node{
		String type;
		String name;
		public Node(String type,String name){
			this.type=type;
			this.name=name;
		}
		public String getType() {
			return type;
		}
		public String getName() {
			return name;
		}
		
	}
	static LinkedList<Node> ll=new LinkedList<Node>();
	
	public static void enqueue(Node node){
		ll.addFirst(node);
	}
	public static Node dequeue(){
		return ll.removeLast();
	}
	
	public static Node dequeueDog(){
		//Boolean b=false;
		int index=0;
		while(index<=ll.size()-1){
			if(ll.get(index).getType()=="dog"){
				Node n= ll.get(index);
				ll.remove(index);
				return n;
			}
			index++;
		}
		return null;
			
	}
	public static boolean dequeueCat(){
		//Boolean b=false;
				int index=0;
				while(index<=ll.size()-1){
					if(ll.get(index).getType()=="dog"){
						Node n= ll.get(index);
						ll.remove(index);
						return n;
					}
					index++;
				}
				return null;
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		enqueue(new Node("dog", "Jax"));
		enqueue(new Node("dog", "Jax"));
		enqueue(new Node("dog", "Marry"));
		enqueue(new Node("cat", "Roger"));
		Node n=dequeue();
		System.out.println(n.getName());
		System.out.println(n.getType());
		
		System.out.println("==");
		try{
			Node n2=dequeueDog();
			System.out.println(n2.getName());
			System.out.println(n2.getType());
			
			Node n2=dequeueCat();
			System.out.println(n2.getName());
			System.out.println(n2.getType());
		}
		catch(NullPointerException e){
			System.out.println("No specified type left");
		}
		
		
		
		
	}

}
