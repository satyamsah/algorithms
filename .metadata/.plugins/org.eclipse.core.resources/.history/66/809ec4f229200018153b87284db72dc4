import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class Solution {
    
   static boolean ifAdjacent(String s1, String s2){
       int count=0;
        if(s1.length()!=s2.length()){
            return false;
        }
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)!=s2.charAt(i)){
                count++;
            }
        }
        return count==1?true:false;
    }
   static public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
	   char a='-1';
	   System.out.println(a);
        if(beginWord==endWord){
            return 0;
        }  
        int count=1;
        Queue<String> q= new LinkedList<String>();
        q.add(beginWord);
        while(!q.isEmpty()){
           String front= q.remove();
            boolean foundadj=false;
            for (int i=0;i<wordList.size();i++){
              	if(ifAdjacent(front,endWord) && wordList.contains(endWord)){
            		count++;
            		return count;
            	}
                foundadj=ifAdjacent(wordList.get(i),front);
                if(foundadj){
                    count++;
                    if(wordList.get(i)==endWord  && wordList.contains(endWord)){
                        return count;
                    }
                    q.add(wordList.get(i));
                    wordList.remove(i);
                    break;
                }
                
            }
            if(!foundadj){
                return 0;
            }
        }
         return count;
    }
    
    public static void main(String[] args){
    	ArrayList<String> arr= new ArrayList<>();
    	arr.add("hot");
     	arr.add("dot");
    	arr.add("dog");
    	arr.add("lot");
    	arr.add("log");	
    	arr.add("cog");
    	System.out.println(ladderLength("hit", "cog", arr));
    }
}