package levelOrderTraversalEfficient;

import java.util.LinkedList;
import java.util.Queue;

public class LevelOrderTraversal {
	
	static Node root;
	
	static class Node{
		Node left;
		Node right;
		int data;
		
		Node(int data){
			this.data=data;
			left=right=null;
		}
	}
	
	public static void traverseLineByLine(){
		
		if(root==null){
			return;
		}
		Queue<Node>  queue = new LinkedList<Node>();
		queue.add(root);
		
		while(true){
			
			
			int linesize=queue.size();
			if(linesize==0){
				break;
			}
			
			while(linesize>0){
				
				Node top= queue.peek();
				
				System.out.println(top.data);
				queue.add(top.left);
				queue.add(top.right);
				linesize--;
				
			}
			System.out.println();
			
			
		}
		
	}

	public static void main(String[] str){
		//LevelOrderTraversal tree= new LevelOrderTraversal();
		root= new Node(33);
		root.left= new Node(22);
		root.right= new Node(44);
		root.left.right= new Node(55);
		root.left.left= new Node(66);
		root.right.right= new Node(44);
		traverseLineByLine();
	}
	
}
