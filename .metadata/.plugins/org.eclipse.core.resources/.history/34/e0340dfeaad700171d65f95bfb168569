import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Graph {

	LinkedList<Integer> arredges [];
	int V;
	public Graph(int V){
		this.V=V;
		arredges= new LinkedList[V];
		for (int i=0;i<V;i++){
			arredges[i]= new LinkedList<Integer>();
		}
	}
	
	void addinfront(int src, int node){
		arredges[src].add(node);
	}
	
	List<Integer> BFS(int source){
		List<Integer> resultBFSsequence=new ArrayList<>();
		boolean visited[]=new boolean[V];
		Queue<Integer> queue= new LinkedList<Integer>();
		queue.add(source);
		while(!queue.isEmpty()){
			int currNode=queue.remove();
			resultBFSsequence.add(currNode);
			visited[currNode]=true;	
			LinkedList<Integer> edges=arredges[source];
			System.out.println(arredges[source]);
			for(int i=0;i<edges.size();i++){
				int node=edges.get(i);
				System.out.println(node);
				if(!visited[node]){
					visited[node]=true;
					queue.add(node);
				}
			}
		}
		return resultBFSsequence;
	}
	void printGraph(){
		for(int i=0;i<arredges.length;i++){
			System.out.println("node: "+i+" adjacencylist"+arredges[i]);
		}
	}
	public static void main(String args[]){
		Graph graph= new Graph(10);
		graph.addinfront(0, 2);
		graph.addinfront(2, 5);
		graph.addinfront(2, 4);
		graph.addinfront(5,1);
		graph.addinfront(1,3);
		graph.printGraph();
		List<Integer> result= graph.BFS(0);
		for(int i:result){
			System.out.print(i);
		}
	}
	
	
}
